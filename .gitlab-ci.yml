# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Bash.gitlab-ci.yml

# See https://docs.gitlab.com/ee/ci/yaml/index.html for all available options

# you can delete this line if you're not using Docker
# Debian testing
# image: rocker/r-base:4.1.0
# Ubuntu LTS
# image: rocker/r-ver:4.1.0
# Ubuntu r2u
image: rocker/r2u:22.04
stages:
  - checkrhub
  - coverage

variables:
  _R_CHECK_CRAN_INCOMING_: "false"
  _R_CHECK_FORCE_SUGGESTS_: "true"
  RUN_CI_JOB_AUTO: "false"

default:
  before_script:
   - echo "Before script section"
   - R -e "install.packages(c('rhub'), dependencies = TRUE)"
   - echo "$RHUB_EMAIL"
   - echo "$RHUB_TOKEN"
   - R -e "rhub::validate_email(email = '$RHUB_EMAIL', token = '$RHUB_TOKEN')"
   - apt update -y && apt upgrade -y
   - apt install -y pandoc pandoc-citeproc apt-utils curl
   - apt install -y r-cran-devtools r-cran-markdown r-cran-dplyr r-cran-ggplot2
   - apt install -y r-cran-sf r-cran-terra r-cran-curl r-cran-covr r-cran-sen2r
   # Install Google cloud
   - curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-455.0.0-linux-x86_64.tar.gz
   - tar xvzf google-cloud-cli-455.0.0-linux-x86_64.tar.gz
   - ./google-cloud-sdk/install.sh -q
   #- ./google-cloud-sdk/bin/gcloud init
   - PATH=$PATH:`pwd`/google-cloud-sdk/bin/

# test:
#    stage: test
#    script:
#    - echo "Installing system"
#    - apt-get update
#    - apt-get install --yes libxml2-dev libcurl4-openssl-dev libfontconfig1-dev libssl-dev libfribidi-dev libharfbuzz-dev libfreetype-dev libpng-dev libtiff5-dev libjpeg-dev libprotobuf-dev libjq-dev libgdal-dev libudunits2-dev protobuf-compiler libprotobuf-lite32 wget ca-certificates gnupg
#    # Setup r2u
#    #- wget -q -O- https://eddelbuettel.github.io/r2u/assets/dirk_eddelbuettel_key.asc | tee -a /etc/apt/trusted.gpg.d/cranapt_key.asc
#    #- echo "deb [arch=amd64] https://r2u.stat.illinois.edu/ubuntu jammy main" > /etc/apt/sources.list.d/cranapt.list
#    - apt-get update -qq
#    # Minimal packages
#    - apt-get install --yes --no-install-recommends r-base r-base-core r-recommended r-cran-devtools r-cran-dplyr r-cran-sf r-cran-terra
#    # - R -e "'devtools' %in% installed.packages()"
#    # with recommends and suggests...
#    #- apt-get install --yes --install-suggests r-cran-testthat r-cran-devtools
#    - apt-get autoremove --yes --purge
#    - apt-get autoclean --yes
#    #- R -e ".libPaths()"
#    #- R -e "install.packages(c(‘usethis’, ‘pkgdown’, ‘rcmdcheck’, ‘roxygen2’, ‘rversions’, ‘urlchecker’, 'geojsonlint'), dependencies = TRUE)"
#    - R -e "install.packages(c('devtools', 'pkgdown', 'rcmdcheck', 'roxygen2', 'rversions', 'urlchecker'), dependencies = TRUE)"
#    #- R -e "install.packages('devtools', dependencies = TRUE)"
#    - R -e "devtools::install_deps(dependencies = TRUE)"
#    - echo "Building package"
#    - R CMD build . --no-build-vignettes --no-manual
#    - PKG_FILE_NAME=$(ls -1t *.tar.gz | head -n 1)
#    - echo "Running check"
#    - R CMD check "${PKG_FILE_NAME}" --no-build-vignettes --no-manual
#    cache:
#       key: "$CI_COMMIT_REF_SLUG"
#       paths:
#       - installed_deps/
#    artifacts:
#     paths:
#     - '*.Rcheck/'
#    only:
#    - main

check_platforms:
  stage: checkrhub
  script:
    #- Rscript inst/rhubcheck.R "ubuntu-gcc-release"
    #- Rscript inst/rhubcheck.R "ubuntu-gcc-devel"
    #- Rscript inst/rhubcheck.R "windows-x86_64-devel"
    #- Rscript inst/rhubcheck.R "macos-highsierra-release-cran"
    # Platforms hard-coded in rhubcheck.R script
    #- apt install -y libssl-dev libxml2-dev libcurl4-openssl-dev libpng-dev
    #- apt install -y libfontconfig1-dev libssl-dev libfribidi-dev libharfbuzz-dev libfreetype-dev
    #- apt install -y libtiff5-dev libjpeg-dev libprotobuf-dev libjq-dev libgdal-dev libudunits2-dev
    #- apt install -y protobuf-compiler libprotobuf-dev wget ca-certificates gnupg
    - Rscript inst/rhubcheck.R
    # Check MAC
    # Incorporated into rhubcheck.R
    # - mac_url = devtools::check_mac_release()
    # - Sys.sleep(600)
    # - mac_res <- curl::curl(mac_url)
    # - mac_res <- readLines(mac_res)
    # - errs <- length(grep(pattern = "ERROR", mac_res))
    # - warns <- length(grep(pattern = "WARNING", mac_res))
    # - notes <- length(grep(pattern = "NOTE", mac_res))
    # - mac_df <- data.frame("platform" = "macos_release",
    #               "errors" = errs, "warnings" = warns, "notes" = notes)

    # - rhub_chk <- check(platforms =
    #                 c("ubuntu-gcc-devel",
    #                   "ubuntu-gcc-release",
    #                   "windows-x86_64-release"))
    # - statuses <- rhub_chk[[".__enclos_env__"]][["private"]][["status_"]]
    # - status_list <- lapply(statuses, function(thisStatus) {
    #       data.frame(
    #         plaform  = thisStatus[["platform"]][["name"]],
    #         errors   = length(thisStatus[["result"]][["errors"]]),
    #         warnings = length(thisStatus[["result"]][["warnings"]]),
    #         notes    = length(thisStatus[["result"]][["notes"]]),
    #         stringsAsFactors = FALSE
    #       )
    #     })
    # - res <- do.call(rbind, status_list)
    # - print(res)
  rules:
    - if: $RUN_CI_JOB_AUTO' == "false"
      when: manual
  
  stage: coverage
  script:
    - R -e "covr::package_coverage()"
  rules:
    - if: $RUN_CI_JOB_AUTO == "false"
      when: manual
